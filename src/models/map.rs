use chrono::{DateTime, Utc};
use serde::Deserialize;

use crate::{
    models::enums::{
        AIDeclarationType, BeatSaberEnvironment, Characteristic, MapState, MapTag, UserSentiment,
    },
    models::user::UserDetail,
};

/// Information about a map on BeatSaver.
///
/// This is an alias for `MapDetail`.
pub type Map = MapDetail;

/// A summary of any parity issues a map difficulty may have.
#[derive(Debug, Deserialize)]
pub struct MapParitySummary {
    /// The number of general map errors a map difficulty has.
    pub errors: i32,

    /// The number of resets (double directionals) a map difficulty has.
    pub resets: i32,

    /// The number of warnings a map difficulty has.
    pub warns: i32,
}

/// The general metadata of a map.
#[derive(Debug, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct MapDetailMetadata {
    /// The BPM of the song.
    pub bpm: f64,

    /// The length of the song, in seconds.
    pub duration: i32,

    /// The song name.
    pub song_name: String,

    /// The song's sub name.
    pub song_sub_name: String,

    /// The artist of the song.
    pub song_author_name: String,

    /// The creator of the map.
    pub level_author_name: String,
}

/// The mapset metadata.
#[derive(Debug, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct MapVersion {
    /// The hash of a map.
    pub hash: String,

    /// The alphanumeric key assigned to the map.
    pub key: Option<String>,

    /// The state of the map.
    pub state: MapState,

    /// The Sage Score of the map. Negative values mean it's more likely the map was autogenerated.
    #[serde(default)]
    pub sage_score: i32,

    /// A list of difficulties of the map.
    pub diffs: Vec<MapDifficulty>,

    /// A link to the cover art.
    #[serde(rename = "coverURL")]
    pub cover_url: String,

    /// A link to download the mapset.
    #[serde(rename = "downloadURL")]
    pub download_url: String,

    /// A link to preview 30 seconds of the song.
    #[serde(rename = "previewURL")]
    pub preview_url: String,

    /// The date the mapset was created.
    pub created_at: DateTime<Utc>,
}

/// Data about a difficulty of the map.
#[derive(Debug, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct MapDifficulty {
    /// Note jump speed, the rate at which blocks move down the highway at the player.
    /// Higher values mean the blocks move faster, lower values mean the blocks move slower.
    pub njs: f64,

    /// The distance a note spawns at from the player.
    pub offset: f64,

    /// The number of notes in the difficulty.
    pub notes: i32,

    /// The number of bombs in the difficulty.
    pub bombs: i32,

    /// The number of walls in the difficulty.
    pub obstacles: i32,

    /// Average notes per second of the difficulty.
    pub nps: f64,

    /// The length of the difficulty.
    /// TODO: figure out what this better represents.
    pub length: f64,

    /// The type of map the difficulty is.
    pub characteristic: Characteristic,

    /// The difficulty name.
    pub difficulty: String,

    /// The number of lighting events in the difficulty.
    pub events: i32,

    /// Whether Chroma is needed for this difficulty or not.
    pub chroma: bool,

    /// Whether Mapping Extensions is needed for this difficulty or not.
    pub me: bool,

    /// Whether Noodle Extensions is needed for this difficulty or not.
    pub ne: bool,

    /// Whether there is a video (viewable by the Cinema mod) for this difficulty.
    pub cinema: bool,

    /// Whether Vivify is needed for this difficulty or not.
    #[serde(default)]
    pub vivify: bool,

    /// The duration of the difficulty, in seconds.
    /// TODO: be sure of this.
    pub seconds: f64,

    /// Errors in parity the map has, if any.
    pub parity_summary: MapParitySummary,

    /// The number of stars the difficulty has on ScoreSaber, if ranked/qualified.
    #[serde(rename = "stars")]
    pub ss_stars: Option<f64>,

    /// The number of stars the difficulty has on BeatLeader, if ranked/qualified.
    pub bl_stars: Option<f64>,

    /// The max possible score for the difficulty (100% accuracy).
    pub max_score: i32,

    /// The custom label for the difficulty, if any.
    pub label: Option<String>,

    /// The recommended environment to play the map in, if any.
    pub environment: Option<BeatSaberEnvironment>,
}

/// Statistics about the map from BeatSaver.
#[derive(Debug, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct MapStats {
    /// Number of upvotes the map has.
    pub upvotes: i32,

    /// Number of downvotes the map has.
    pub downvotes: i32,

    /// The rating of a map.
    ///
    /// Calculated with pos% * (pos% - 0.5) * 2^(log_3((0.5 * votes) + 1)),
    /// where votes is upvotes + downvotes, and pos% is upvotes/votes.
    ///
    /// See: this [Discord message](https://discord.com/channels/882730837974609940/882753599191519262/1107676143714324650) from the BeatSaver server.
    pub score: f64,

    /// Number of downloads the map has.
    pub downloads: i32,

    /// Number of plays the map has, of any difficulty.
    pub plays: i32,

    /// Number of written reviews for the map.
    pub reviews: i32,

    /// General user sentiment of the map.
    pub sentiment: Option<UserSentiment>,
}

/// Information about a map on BeatSaver.
#[derive(Debug, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct MapDetail {
    /// Whether BeatSage or other map-creating AI was used to create the map or not.
    pub automapper: bool,

    /// Whether the map is qualified on BeatLeader or not.
    pub bl_qualified: bool,

    pub bookmarked: bool,

    /// The date, in UTC, the map was uploaded.
    pub created_at: DateTime<Utc>,

    /// The curator of the map, if any.
    pub curator: Option<UserDetail>,

    /// The method used to detect a mapset as AI-generated.
    pub declared_ai: AIDeclarationType,

    /// The date, in UTC, the map was deleted, if any.
    pub deleted_at: Option<DateTime<Utc>>,

    /// The date, in UTC, the map was last published, if any.
    pub last_published_at: DateTime<Utc>,

    /// Whether the map is NSFW or not.
    #[serde(default)]
    pub nsfw: bool,

    /// The alphanumeric key assigned to the map.
    pub id: String,

    /// The name of the map, usually in the format "song_author - song_name song_sub_name"
    /// This can be edited by the map uploader to contain extra information.
    pub name: String,

    /// The description of the map.
    pub description: String,

    /// The general metadata (BPM, length, map/song author, song name) of the map.
    pub metadata: MapDetailMetadata,

    /// The date the map was first uploaded.
    pub uploaded: DateTime<Utc>,

    /// Supposedly, an array containing all the revisions of a map.
    /// According to a [Discord message](https://discord.com/channels/882730837974609940/882731668589387796/1003157825553432616) this only publicly returns the latest revision.
    pub versions: Vec<MapVersion>,

    /// The uploader of the map.
    pub uploader: UserDetail,

    /// A list of mappers who collaborated with the uploader, if any.
    pub collaborators: Option<Vec<UserDetail>>,

    /// How many reviews, downloads, up/downvotes, and plays a map has.
    pub stats: MapStats,

    /// Whether the map is ranked on BeatLeader or not.
    pub bl_ranked: bool,

    /// Whether the map is qualified on ScoreSaber or not.
    #[serde(rename = "qualified")]
    pub ss_qualified: bool,

    /// Whether the map is ranked on ScoreSaber or not.
    #[serde(rename = "ranked")]
    pub ss_ranked: bool,

    /// The date a map was curated at, if any.
    pub curated_at: Option<DateTime<Utc>>,

    /// Tags of a map.
    pub tags: Vec<MapTag>,

    /// The date, in UTC, the map was last updated, if any.
    pub updated_at: Option<DateTime<Utc>>,
}

/// A map in a playlist.
#[derive(Debug, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct MapDetailWithOrder {
    /// An array of maps.
    pub map: MapDetail,

    /// The index of the map, starting at 1.
    pub order: f64,
}

/// A deleted map.
#[derive(Debug, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct DeletedMap {
    /// The date a map was deleted at.
    pub deleted_at: DateTime<Utc>,

    /// The alphanumeric code for the map.
    pub id: String,
}
